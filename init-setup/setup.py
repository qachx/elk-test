#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Kibana –∏ –¥–∞—à–±–æ—Ä–¥–æ–≤
–°–æ–∑–¥–∞–µ—Ç Data Views, –¥–∞—à–±–æ—Ä–¥—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import requests
import json
import time
import sys

KIBANA_URL = "http://kibana:5601"
ELASTICSEARCH_URL = "http://elasticsearch:9200"

def wait_for_services():
    """–ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ Elasticsearch –∏ Kibana"""
    print("üîÑ Waiting for Elasticsearch...")
    while True:
        try:
            response = requests.get(f"{ELASTICSEARCH_URL}/_cluster/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Elasticsearch ready")
                break
        except:
            pass
        time.sleep(5)
    
    print("üîÑ Waiting for Kibana...")
    while True:
        try:
            response = requests.get(f"{KIBANA_URL}/api/status", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Kibana ready")
                break
        except:
            pass
        time.sleep(5)

def create_data_view():
    """–°–æ–∑–¥–∞–µ—Ç Data View –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ª–æ–≥–æ–≤"""
    print("üìä Creating Kibana Data View...")
    
    headers = {
        'Content-Type': 'application/json',
        'kbn-xsrf': 'true'
    }
    
    data_view = {
        "data_view": {
            "title": "banking-logs-*",
            "name": "Banking Logs",
            "timeFieldName": "@timestamp"
        }
    }
    
    try:
        response = requests.post(
            f"{KIBANA_URL}/api/data_views/data_view",
            headers=headers,
            json=data_view,
            timeout=30
        )
        
        if response.status_code in [200, 409]:  # 409 = —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            print("‚úÖ Data View created successfully")
            return True
        else:
            print(f"‚ùå Failed to create Data View: {response.status_code}")
            print(response.text)
            return False
    except Exception as e:
        print(f"‚ùå Error creating Data View: {e}")
        return False

def create_index_template():
    """–°–æ–∑–¥–∞–µ—Ç index template –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞"""
    print("üîß Creating Elasticsearch index template...")
    
    template = {
        "index_patterns": ["banking-logs-*"],
        "template": {
            "settings": {
                "number_of_shards": 1,
                "number_of_replicas": 0
            },
            "mappings": {
                "properties": {
                    "@timestamp": {"type": "date"},
                    "timestamp": {"type": "date"},
                    "service": {"type": "keyword"},
                    "level": {"type": "keyword"},
                    "message": {"type": "text"},
                    "user_id": {"type": "keyword"},
                    "amount": {"type": "double"},
                    "currency": {"type": "keyword"},
                    "client_ip": {"type": "ip"},
                    "risk_score": {"type": "integer"},
                    "event_type": {"type": "keyword"},
                    "status": {"type": "keyword"},
                    "error_code": {"type": "keyword"}
                }
            }
        }
    }
    
    try:
        response = requests.put(
            f"{ELASTICSEARCH_URL}/_index_template/banking-logs",
            json=template,
            timeout=30
        )
        
        if response.status_code in [200, 201]:
            print("‚úÖ Index template created")
            return True
        else:
            print(f"‚ùå Failed to create template: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error creating template: {e}")
        return False

def create_sample_dashboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –¥–∞—à–±–æ—Ä–¥–∞ –≤ Kibana"""
    print("üìà Creating sample dashboard...")
    
    headers = {
        'Content-Type': 'application/json',
        'kbn-xsrf': 'true'
    }
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π API
    dashboard = {
        "attributes": {
            "title": "Banking Security Overview",
            "description": "Overview of banking system logs and security events",
            "panelsJSON": "[]",
            "optionsJSON": "{\"useMargins\":true,\"syncColors\":false,\"hidePanelTitles\":false}",
            "version": 1,
            "timeRestore": False,
            "kibanaSavedObjectMeta": {
                "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"
            }
        }
    }
    
    try:
        response = requests.post(
            f"{KIBANA_URL}/api/saved_objects/dashboard",
            headers=headers,
            json=dashboard,
            timeout=30
        )
        
        if response.status_code in [200, 409]:
            print("‚úÖ Sample dashboard created")
            return True
        else:
            print(f"‚ùå Failed to create dashboard: {response.status_code}")
            print(f"Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error creating dashboard: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üè¶ Banking ELK Auto-Setup Starting...")
    print("=" * 50)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    wait_for_services()
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    print("‚è≥ Waiting for full initialization...")
    time.sleep(30)
    
    # –°–æ–∑–¥–∞–µ–º index template
    if not create_index_template():
        print("‚ö†Ô∏è Template creation failed, continuing...")
    
    # –°–æ–∑–¥–∞–µ–º Data View
    if not create_data_view():
        print("‚ö†Ô∏è Data View creation failed, continuing...")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞—à–±–æ—Ä–¥–∞  
    if not create_sample_dashboard():
        print("‚ö†Ô∏è Dashboard creation failed, continuing...")
    
    print("=" * 50)
    print("üéâ Setup completed!")
    print("")
    print("üìä Access your services:")
    print("   Kibana:     http://localhost:5601")
    print("   Grafana:    http://localhost:3000 (admin/admin)")
    print("   Prometheus: http://localhost:9090")
    print("")
    print("üí° Data should appear in Kibana within 2-3 minutes")
    print("üí° Check Discover section for banking-logs-* data view")

if __name__ == "__main__":
    main() 