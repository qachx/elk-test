#!/usr/bin/env python3
"""
Banking Payment Service Log Generator
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ª–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import json
import random
import time
import logging
import os
from datetime import datetime, timedelta
from faker import Faker
from pythonjsonlogger import jsonlogger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Faker –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
fake = Faker('ru_RU')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "/app/logs"
os.makedirs(log_dir, exist_ok=True)

# JSON logger –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
json_handler = logging.FileHandler(f"{log_dir}/payment-service.json")
json_formatter = jsonlogger.JsonFormatter(
    fmt='%(asctime)s %(levelname)s %(name)s %(message)s'
)
json_handler.setFormatter(json_formatter)

# Plain text logger –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª–æ–≥–æ–≤
text_handler = logging.FileHandler(f"{log_dir}/payment-service.log")
text_formatter = logging.Formatter(
    '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)
text_handler.setFormatter(text_formatter)

# –°–æ–∑–¥–∞—ë–º –ª–æ–≥–≥–µ—Ä—ã
json_logger = logging.getLogger('payment-service-json')
json_logger.addHandler(json_handler)
json_logger.setLevel(logging.INFO)

text_logger = logging.getLogger('payment-service')
text_logger.addHandler(text_handler)
text_logger.setLevel(logging.INFO)

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞ (IBAN –¥–ª—è –†–æ—Å—Å–∏–∏)
def generate_iban():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π IBAN"""
    bank_code = random.choice(['044525974', '044525225', '044525593'])  # –í–¢–ë, –°–±–µ—Ä–±–∞–Ω–∫, –ê–ª—å—Ñ–∞
    account = ''.join([str(random.randint(0, 9)) for _ in range(20)])
    return f"RU{random.randint(10, 99)}{bank_code}{account}"

BANK_ACCOUNTS = [
    {
        'account_id': f'acc_{i:06d}',
        'iban': generate_iban(),
        'balance': random.uniform(1000, 1000000),
        'owner_name': fake.name(),
        'account_type': random.choice(['current', 'savings', 'business'])
    }
    for i in range(1, 1001)  # 1000 —Å—á–µ—Ç–æ–≤
]

# –¢–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
PAYMENT_TYPES = {
    'transfer': {
        'level': 'INFO', 
        'weight': 40,
        'min_amount': 100,
        'max_amount': 100000,
        'error_rate': 0.08
    },
    'card_payment': {
        'level': 'INFO', 
        'weight': 30,
        'min_amount': 50,
        'max_amount': 50000,
        'error_rate': 0.05
    },
    'utility_payment': {
        'level': 'INFO', 
        'weight': 15,
        'min_amount': 500,
        'max_amount': 20000,
        'error_rate': 0.03
    },
    'salary_payment': {
        'level': 'INFO', 
        'weight': 10,
        'min_amount': 20000,
        'max_amount': 300000,
        'error_rate': 0.01
    },
    'large_transfer': {
        'level': 'WARN', 
        'weight': 4,
        'min_amount': 500000,
        'max_amount': 10000000,
        'error_rate': 0.15
    },
    'international_transfer': {
        'level': 'INFO', 
        'weight': 1,
        'min_amount': 1000,
        'max_amount': 500000,
        'error_rate': 0.20
    }
}

# –û—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
PAYMENT_ERRORS = [
    'insufficient_funds',
    'account_blocked', 
    'invalid_recipient',
    'limit_exceeded',
    'network_timeout',
    'fraud_detected',
    'invalid_amount',
    'service_unavailable',
    'duplicate_transaction'
]

# –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π
RECIPIENTS = [
    '–û–û–û "–ì–∞–∑–ø—Ä–æ–º —ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç"',
    '–ú–æ—Å–≠–Ω–µ—Ä–≥–æ–°–±—ã—Ç',
    '–ú–µ–≥–∞—Ñ–æ–Ω',
    '–ú–¢–°',
    '–ë–∏–ª–∞–π–Ω',
    '–ü–ê–û "–ú–¢–ë–¶"',
    'X5 Retail Group',
    '–ú–∞–≥–Ω–∏—Ç',
    '–õ–µ–Ω—Ç–∞',
    '–û–∑–æ–Ω',
    'Wildberries',
    '–Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏'
]

def get_current_hour_activity_multiplier():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    current_hour = datetime.now().hour
    
    if 9 <= current_hour <= 18:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        return 2.5
    elif 19 <= current_hour <= 22:  # –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã
        return 1.8
    elif 23 <= current_hour <= 6:   # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
        return 0.2
    else:  # –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã
        return 1.0

def generate_payment_event():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
    payment_weights = [PAYMENT_TYPES[ptype]['weight'] for ptype in PAYMENT_TYPES]
    payment_type = random.choices(list(PAYMENT_TYPES.keys()), weights=payment_weights)[0]
    payment_info = PAYMENT_TYPES[payment_type]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—á–µ—Ç–∞
    sender_account = random.choice(BANK_ACCOUNTS)
    recipient_account = random.choice(BANK_ACCOUNTS)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Ä–∞–∑–Ω—ã–µ
    while recipient_account['account_id'] == sender_account['account_id']:
        recipient_account = random.choice(BANK_ACCOUNTS)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
    amount = round(random.uniform(payment_info['min_amount'], payment_info['max_amount']), 2)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É
    currency = 'RUB'
    if payment_type == 'international_transfer':
        currency = random.choice(['USD', 'EUR', 'CNY', 'KZT'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É
    is_error = random.random() < payment_info['error_rate']
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    timestamp = datetime.now()
    transaction_id = fake.uuid4()
    
    event_data = {
        'timestamp': timestamp.isoformat(),
        'service': 'payment-service',
        'transaction_id': transaction_id,
        'payment_type': payment_type,
        'sender_account': sender_account['account_id'],
        'sender_iban': sender_account['iban'],
        'sender_name': sender_account['owner_name'],
        'recipient_account': recipient_account['account_id'],
        'recipient_iban': recipient_account['iban'],
        'recipient_name': recipient_account['owner_name'],
        'amount': amount,
        'currency': currency,
        'processing_time_ms': random.randint(50, 2000)
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    if not is_error:
        event_data.update({
            'status': 'success',
            'level': payment_info['level'],
            'message': f"Payment processed successfully: {amount} {currency}",
            'fee': round(amount * random.uniform(0.001, 0.01), 2),
            'authorization_code': fake.bothify('AUTH-######'),
            'merchant_category': random.choice(['5411', '5812', '4900', '6011']) if payment_type == 'card_payment' else None
        })
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º
        if amount > 1000000:
            event_data.update({
                'level': 'WARN',
                'suspicious_amount': True,
                'compliance_check': True,
                'message': f"Large payment processed: {amount} {currency} - compliance check required"
            })
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    else:
        error_code = random.choice(PAYMENT_ERRORS)
        event_data.update({
            'status': 'failed',
            'level': 'ERROR',
            'error_code': error_code,
            'message': f"Payment failed: {error_code}",
            'retry_count': random.randint(0, 3),
            'can_retry': error_code not in ['fraud_detected', 'account_blocked']
        })
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    if payment_type == 'utility_payment':
        event_data['recipient_name'] = random.choice(RECIPIENTS)
        event_data['service_type'] = random.choice(['electricity', 'gas', 'water', 'internet', 'mobile'])
        
    elif payment_type == 'international_transfer':
        event_data['swift_code'] = fake.bothify('????????###')
        event_data['correspondent_bank'] = fake.company()
        event_data['exchange_rate'] = round(random.uniform(50, 100), 4) if currency != 'RUB' else 1.0
        
    elif payment_type == 'card_payment':
        event_data['card_number'] = fake.credit_card_number()[-4:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
        event_data['terminal_id'] = fake.bothify('TERM-#####')
        event_data['merchant_name'] = fake.company()
    
    # –ù–æ—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ
    if 0 <= timestamp.hour <= 6:
        event_data['night_transaction'] = True
        if event_data['status'] == 'success':
            event_data['level'] = 'WARN'
            event_data['message'] += " [Night transaction - requires review]"
    
    return event_data

def log_event(event_data):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥–∏"""
    level = event_data['level']
    message = event_data.get('message', f"Payment event: {event_data['payment_type']}")
    
    # –£–±–∏—Ä–∞–µ–º message –∏–∑ extra —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    log_data = event_data.copy()
    log_data.pop('message', None)
    
    # JSON –ª–æ–≥
    if level == 'INFO':
        json_logger.info(message, extra=log_data)
        text_logger.info(message)
    elif level == 'WARN':
        json_logger.warning(message, extra=log_data)
        text_logger.warning(message)
    elif level == 'ERROR':
        json_logger.error(message, extra=log_data)
        text_logger.error(message)

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"""
    print("üí∞ Starting Banking Payment Service Log Generator...")
    print(f"üìÅ Logs will be written to: {log_dir}")
    
    event_count = 0
    
    try:
        while True:
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
            activity_multiplier = get_current_hour_activity_multiplier()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            events_per_cycle = max(1, int(random.randint(2, 8) * activity_multiplier))
            
            for _ in range(events_per_cycle):
                event = generate_payment_event()
                log_event(event)
                event_count += 1
                
                if event_count % 100 == 0:
                    print(f"üìä Generated {event_count} payment events")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–æ—Ç 0.5 –¥–æ 5 —Å–µ–∫—É–Ω–¥)
            sleep_time = random.uniform(0.5, 5.0) / activity_multiplier
            time.sleep(sleep_time)
            
    except KeyboardInterrupt:
        print(f"\n‚úÖ Payment service generator stopped. Total events: {event_count}")
    except Exception as e:
        print(f"‚ùå Error in payment service generator: {e}")

if __name__ == "__main__":
    main() 