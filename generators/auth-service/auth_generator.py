#!/usr/bin/env python3
"""
Banking Auth Service Log Generator
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ª–æ–≥–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import json
import random
import time
import logging
import os
from datetime import datetime, timedelta
from faker import Faker
from pythonjsonlogger import jsonlogger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Faker –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
fake = Faker('ru_RU')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "/app/logs"
os.makedirs(log_dir, exist_ok=True)

# JSON logger –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
json_handler = logging.FileHandler(f"{log_dir}/auth-service.json")
json_formatter = jsonlogger.JsonFormatter(
    fmt='%(asctime)s %(levelname)s %(name)s %(message)s'
)
json_handler.setFormatter(json_formatter)

# Plain text logger –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª–æ–≥–æ–≤
text_handler = logging.FileHandler(f"{log_dir}/auth-service.log")
text_formatter = logging.Formatter(
    '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)
text_handler.setFormatter(text_formatter)

# –°–æ–∑–¥–∞—ë–º –ª–æ–≥–≥–µ—Ä—ã
json_logger = logging.getLogger('auth-service-json')
json_logger.addHandler(json_handler)
json_logger.setLevel(logging.INFO)

text_logger = logging.getLogger('auth-service')
text_logger.addHandler(text_handler)
text_logger.setLevel(logging.INFO)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–∞–Ω–∫–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
BANK_USERS = [
    {'user_id': f'user_{i:04d}', 'username': fake.user_name(), 'email': fake.email(), 
     'phone': fake.phone_number(), 'full_name': fake.name()}
    for i in range(1, 501)  # 500 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
]

# IP –∞–¥—Ä–µ—Å–∞ (—Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤)
IP_POOLS = {
    'moscow': ['77.88.55.', '95.108.213.', '178.154.131.'],
    'spb': ['81.177.6.', '188.120.245.', '176.59.108.'],
    'regions': ['89.108.65.', '188.113.194.', '94.25.173.'],
    'suspicious': ['185.220.101.', '198.98.51.', '77.247.181.']
}

# –°–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
AUTH_EVENTS = {
    'login_success': {'level': 'INFO', 'weight': 70},
    'login_failed': {'level': 'WARN', 'weight': 15},
    'account_locked': {'level': 'ERROR', 'weight': 3},
    'password_reset': {'level': 'INFO', 'weight': 5},
    'two_factor_required': {'level': 'INFO', 'weight': 4},
    'suspicious_login': {'level': 'WARN', 'weight': 2},
    'logout': {'level': 'INFO', 'weight': 1}
}

def get_random_ip(region='random'):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    if region == 'random':
        region = random.choice(list(IP_POOLS.keys()))
    
    prefix = random.choice(IP_POOLS[region])
    return f"{prefix}{random.randint(1, 254)}"

def get_current_hour_activity_multiplier():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    current_hour = datetime.now().hour
    
    if 9 <= current_hour <= 18:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        return 3.0
    elif 19 <= current_hour <= 22:  # –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã
        return 1.5
    elif 23 <= current_hour <= 6:   # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        return 0.3
    else:  # –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã
        return 1.0

def generate_auth_event():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user = random.choice(BANK_USERS)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
    event_weights = [AUTH_EVENTS[event]['weight'] for event in AUTH_EVENTS]
    event_type = random.choices(list(AUTH_EVENTS.keys()), weights=event_weights)[0]
    event_info = AUTH_EVENTS[event_type]
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    timestamp = datetime.now()
    session_id = fake.uuid4()
    
    # IP –∞–¥—Ä–µ—Å (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–≥–∏–Ω—ã —á–∞—â–µ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP)
    if event_type == 'suspicious_login':
        client_ip = get_random_ip('suspicious')
    else:
        client_ip = get_random_ip()
    
    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –±—Ä–∞—É–∑–µ—Ä
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
        'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X)',
        'BankingApp/1.2.3 (iOS)',
        'BankingApp/2.1.0 (Android)'
    ]
    user_agent = random.choice(user_agents)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    event_data = {
        'timestamp': timestamp.isoformat(),
        'service': 'auth-service',
        'event_type': event_type,
        'user_id': user['user_id'],
        'username': user['username'],
        'session_id': session_id,
        'client_ip': client_ip,
        'user_agent': user_agent,
        'level': event_info['level']
    }
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    if event_type == 'login_success':
        event_data.update({
            'message': f"User {user['username']} successfully logged in",
            'location': fake.city(),
            'device_fingerprint': fake.sha256()[:16],
            'two_factor_used': random.choice([True, False])
        })
        
    elif event_type == 'login_failed':
        failure_reasons = ['invalid_password', 'user_not_found', 'account_disabled']
        reason = random.choice(failure_reasons)
        event_data.update({
            'message': f"Login failed for user {user['username']}: {reason}",
            'failure_reason': reason,
            'attempt_count': random.randint(1, 5)
        })
        
    elif event_type == 'account_locked':
        event_data.update({
            'message': f"Account {user['username']} locked due to multiple failed attempts",
            'failed_attempts': random.randint(5, 10),
            'lock_duration': '30m',
            'auto_unlock': True
        })
        
    elif event_type == 'suspicious_login':
        event_data.update({
            'message': f"Suspicious login attempt for user {user['username']}",
            'risk_score': random.randint(70, 95),
            'suspicious_factors': random.sample([
                'unusual_location', 'unusual_time', 'new_device', 
                'multiple_failed_attempts', 'tor_usage'
            ], k=random.randint(1, 3))
        })
        
    elif event_type == 'two_factor_required':
        event_data.update({
            'message': f"Two-factor authentication required for user {user['username']}",
            'sms_sent': random.choice([True, False]),
            'app_notification': True
        })
    
    return event_data

def log_event(event_data):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥–∏"""
    level = event_data['level']
    message = event_data.get('message', f"Auth event: {event_data['event_type']}")
    
    # –£–±–∏—Ä–∞–µ–º message –∏–∑ extra —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    log_data = event_data.copy()
    log_data.pop('message', None)
    
    # JSON –ª–æ–≥
    if level == 'INFO':
        json_logger.info(message, extra=log_data)
        text_logger.info(message)
    elif level == 'WARN':
        json_logger.warning(message, extra=log_data)
        text_logger.warning(message)
    elif level == 'ERROR':
        json_logger.error(message, extra=log_data)
        text_logger.error(message)

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"""
    print("üîê Starting Banking Auth Service Log Generator...")
    print(f"üìÅ Logs will be written to: {log_dir}")
    
    event_count = 0
    
    try:
        while True:
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
            activity_multiplier = get_current_hour_activity_multiplier()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            events_per_cycle = max(1, int(random.randint(1, 5) * activity_multiplier))
            
            for _ in range(events_per_cycle):
                event = generate_auth_event()
                log_event(event)
                event_count += 1
                
                if event_count % 100 == 0:
                    print(f"üìä Generated {event_count} auth events")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–æ—Ç 1 –¥–æ 10 —Å–µ–∫—É–Ω–¥)
            sleep_time = random.uniform(1.0, 10.0) / activity_multiplier
            time.sleep(sleep_time)
            
    except KeyboardInterrupt:
        print(f"\n‚úÖ Auth service generator stopped. Total events: {event_count}")
    except Exception as e:
        print(f"‚ùå Error in auth service generator: {e}")

if __name__ == "__main__":
    main() 