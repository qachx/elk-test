#!/usr/bin/env python3
"""
Banking Metrics Exporter for Prometheus
–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è Prometheus
"""

import time
import random
from prometheus_client import start_http_server, Gauge, Counter, Histogram
from faker import Faker

fake = Faker()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
REQUEST_COUNT = Counter('banking_requests_total', 'Total requests', ['service', 'method', 'status'])
REQUEST_DURATION = Histogram('banking_request_duration_seconds', 'Request duration', ['service'])
ACTIVE_USERS = Gauge('banking_active_users', 'Currently active users')
TRANSACTION_AMOUNT = Gauge('banking_transaction_amount_total', 'Total transaction amount')
ERROR_RATE = Gauge('banking_error_rate', 'Error rate percentage', ['service'])
QUEUE_SIZE = Gauge('banking_queue_size', 'Queue size', ['queue_name'])

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
SERVICES = ['auth-service', 'payment-service', 'fraud-service', 'notification-service']

def update_metrics():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è)
    current_hour = time.localtime().tm_hour
    if 9 <= current_hour <= 18:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
        base_users = random.randint(800, 1200)
    elif 19 <= current_hour <= 22:  # –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã
        base_users = random.randint(400, 700)
    else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
        base_users = random.randint(50, 200)
    
    ACTIVE_USERS.set(base_users + random.randint(-50, 50))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    for service in SERVICES:
        # HTTP –∑–∞–ø—Ä–æ—Å—ã
        for method in ['GET', 'POST', 'PUT', 'DELETE']:
            for status in ['200', '400', '401', '500']:
                # –ë–æ–ª—å—à–µ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                weight = 0.8 if status == '200' else 0.05
                if random.random() < weight:
                    REQUEST_COUNT.labels(service=service, method=method, status=status).inc(
                        random.randint(1, 10)
                    )
        
        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        REQUEST_DURATION.labels(service=service).observe(random.uniform(0.01, 2.0))
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫
        if service == 'fraud-service':
            error_rate = random.uniform(1, 8)  # Fraud —Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –±–æ–ª—å—à–µ –æ—à–∏–±–æ–∫
        elif service == 'payment-service':
            error_rate = random.uniform(0.5, 5)  # –ü–ª–∞—Ç–µ–∂–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã
        else:
            error_rate = random.uniform(0.1, 3)
        
        ERROR_RATE.labels(service=service).set(error_rate)
    
    # –†–∞–∑–º–µ—Ä—ã –æ—á–µ—Ä–µ–¥–µ–π
    queues = ['payment_queue', 'notification_queue', 'fraud_analysis_queue']
    for queue in queues:
        if queue == 'payment_queue':
            size = random.randint(10, 500)  # –ü–ª–∞—Ç–µ–∂–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–æ–π
        else:
            size = random.randint(0, 100)
        
        QUEUE_SIZE.labels(queue_name=queue).set(size)
    
    # –û–±—â–∏–π –æ–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–≤ —Ä—É–±–ª—è—Ö)
    current_total = TRANSACTION_AMOUNT._value._value if hasattr(TRANSACTION_AMOUNT, '_value') else 0
    new_transaction = random.uniform(1000, 500000)  # –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    TRANSACTION_AMOUNT.set(current_total + new_transaction)

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫"""
    port = 8080
    print(f"üìä Starting Banking Metrics Exporter on port {port}")
    print(f"üîó Metrics available at: http://localhost:{port}/metrics")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Prometheus
    start_http_server(port)
    
    metrics_count = 0
    
    try:
        while True:
            update_metrics()
            metrics_count += 1
            
            if metrics_count % 60 == 0:  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                print(f"üìà Updated metrics {metrics_count} times")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            time.sleep(5)
            
    except KeyboardInterrupt:
        print(f"\n‚úÖ Metrics exporter stopped. Total updates: {metrics_count}")
    except Exception as e:
        print(f"‚ùå Error in metrics exporter: {e}")

if __name__ == "__main__":
    main() 